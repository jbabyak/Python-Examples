'''
Title: Bias/Variance Tradeoff

Author: Jessica Babyak

Credit: Math 410: Machihne Learning and Statistics
'''

import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
%matplotlib inline
from math import sin

# define ground truth model f(x)

def f(x):
    return np.sin(x)+np.sin(3*x)+5*np.cos(10*x)+np.sin(20*x)+0.5*np.sin(40*x)

# full dataset (x,y) set consists of N observations in the interval [-x_max,x_max]
# we will subsample from this to create different training sets

N=10**4
x_max=2
x=x_max*(2*np.random.rand(N)-1) # uniform distribution
# measurement noise
sigma_epsilon=1
mean_epsilon=0

# generate noise from a gaussian distribution of mean mean_epsilon and standard deviation sigma_epsilon
epsilon=mean_epsilon+sigma_epsilon*np.random.randn(N)

# full dataset set (x,y)
# target labels
y=f(x)+epsilon

# test set outside of training range:
N_test=10**3
delta_x=0.001
x_test_list=[]
y_test_list=[]
for i in range(1, N_test):
  if i==1:
    x_test=-2
    x_test_list.append(x_test)
  else:
    x_test=x_test_list[i-2]+delta_x
    x_test_list.append(x_test)

  y_test=f(x_test)+sigma_epsilon*np.random.randn()
  y_test_list.append(y_test)
  


#plot
plt.figure(figsize=(12, 6))
x_range = np.linspace(-x_max, x_max, 1000)
# ground truth model
plt.plot(x_range, f(x_range), 'g', linewidth=3.0)
# training set
plt.scatter(x, y)
# test set
for i in range(1, N_test):
  plt.scatter(x_test_list[i-1], y_test_list[i-1], c='r')
#
plt.xlabel('x', size=12)
plt.ylabel('y', size=12)
plt.xticks(np.arange(-x_max, x_max + 1))
plt.show()

